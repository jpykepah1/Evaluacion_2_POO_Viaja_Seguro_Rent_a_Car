üöó Sistema de Gesti√≥n de Arriendos - Viaja Seguro Rent a Car
üìã Descripci√≥n del Proyecto
Sistema completo de gesti√≥n para empresa de arriendo de veh√≠culos desarrollado en Python con arquitectura MVC, conexi√≥n a base de datos MySQL y enfoque en seguridad inform√°tica.

Contexto Acad√©mico: Proyecto para la asignatura "Programaci√≥n Orientada a Objeto Seguro" (TI3021) que implementa los principios de POO, patrones de dise√±o y conexi√≥n segura a bases de datos.

üèóÔ∏è Arquitectura del Sistema
Patr√≥n MVC Implementado
text
MVC/
‚îú‚îÄ‚îÄ üìÅ modelo/          # Entidades del negocio
‚îú‚îÄ‚îÄ üìÅ dao/             # Data Access Object (Persistencia)
‚îú‚îÄ‚îÄ üìÅ dto/             # Data Transfer Object (Transferencia)
‚îú‚îÄ‚îÄ üìÅ controlador/     # L√≥gica de negocio
‚îú‚îÄ‚îÄ üìÅ conex/           # Conexi√≥n a base de datos
‚îú‚îÄ‚îÄ üìÅ utils/           # Utilidades
‚îî‚îÄ‚îÄ üöÄ main.py          # Punto de entrada
Diagrama de Clases (Resumen)
text
Persona (Abstracta)
‚îú‚îÄ‚îÄ User (Empleado)
‚îî‚îÄ‚îÄ Cliente

Vehiculo
Arriendo

Conex (Conexi√≥n BD)
Encoder (Seguridad)
üìÅ Estructura Detallada del C√≥digo
1. Capa de Modelo (/modelo)
persona.py - Clase Abstracta Base
python
class Persona(ABC):
    """
    Clase abstracta que representa una persona con datos b√°sicos
    Implementa encapsulamiento con atributos protegidos
    """
    def __init__(self, run="", nombre="", apellido=""):
        self._run = run           # RUN √∫nico
        self._nombre = nombre     # Nombre 
        self._apellido = apellido # Apellido
    
    @abstractmethod
    def mostrar_info(self): pass  # M√©todo polim√≥rfico
user.py - Modelo de Empleado
python
class User(Persona):
    """
    Representa un empleado del sistema con credenciales de acceso
    Hereda de Persona y a√±ade funcionalidad de autenticaci√≥n
    """
    def __init__(self, run="", nombre="", apellido="", password="", cargo=""):
        super().__init__(run, nombre, apellido)
        self._password = password  # Contrase√±a encriptada
        self._cargo = cargo        # Rol: 'gerente' o 'empleado'
cliente.py - Modelo de Cliente
python
class Cliente(Persona):
    """
    Representa un cliente de la empresa de arriendos
    Hereda de Persona y a√±ade datos de contacto
    """
    def __init__(self, run="", nombre="", apellido="", direccion="", telefono=""):
        super().__init__(run, nombre, apellido)
        self._direccion = direccion  # Direcci√≥n del cliente
        self._telefono = telefono    # Tel√©fono de contacto
vehiculo.py - Modelo de Veh√≠culo
python
class Vehiculo:
    """
    Representa un veh√≠culo disponible para arriendo
    Gestiona estado y precios del veh√≠culo
    """
    def __init__(self, patente="", marca="", modelo="", a√±o=0, precio_diario=0.0):
        self._patente = patente          # Patente √∫nica
        self._marca = marca              # Marca del veh√≠culo
        self._modelo = modelo            # Modelo del veh√≠culo
        self._a√±o = a√±o                  # A√±o del veh√≠culo
        self._precio_diario = precio_diario  # Precio por d√≠a
        self._estado = "disponible"      # Estado: disponible/arrendado/mantencion
arriendo.py - Modelo de Arriendo
python
class Arriendo:
    """
    Representa un contrato de arriendo entre cliente, veh√≠culo y empleado
    Gestiona fechas, costos y estado del arriendo
    """
    def __init__(self, id_vehiculo, id_cliente, id_empleado, fecha_inicio, fecha_fin):
        self._id_vehiculo = id_vehiculo    # ID veh√≠culo arrendado
        self._id_cliente = id_cliente      # ID cliente que arrienda
        self._id_empleado = id_empleado    # ID empleado que gestiona
        self._fecha_inicio = fecha_inicio  # Fecha inicio arriendo
        self._fecha_fin = fecha_fin        # Fecha fin arriendo
        self._costo_total = 0.0            # Calculado autom√°ticamente
        self._estado = "activo"            # Estado: activo/finalizado/cancelado
2. Capa de Persistencia (/dao)
dao_user.py - Acceso a Datos de Usuarios
python
class daoUser:
    """
    Data Access Object para la entidad User/Empleado
    Maneja todas las operaciones CRUD con la base de datos
    """
    def validarLogin(self, user):
        """Valida credenciales de usuario contra la base de datos"""
        sql = "SELECT run, password, nombre, apellido, cargo FROM empleado WHERE run = %s"
        # Ejecuta consulta y retorna resultados
    
    def agregarUsuario(self, user):
        """Inserta nuevo usuario en la base de datos"""
        sql = "INSERT INTO empleado (run, password, nombre, apellido, cargo) VALUES (%s, %s, %s, %s, %s)"
    
    # ... otros m√©todos CRUD
dao_cliente.py, dao_vehiculo.py, dao_arriendo.py
Patr√≥n similar para cada entidad

Operaciones espec√≠ficas por entidad

Manejo consistente de excepciones

3. Capa de Transferencia (/dto)
dto_user.py - Transferencia de Datos de Usuario
python
class UserDTO:
    """
    Data Transfer Object para la entidad User
    Sirve como intermediario entre Controlador y DAO
    Aplica l√≥gica de negocio y seguridad
    """
    def validarLogin(self, username, clave):
        """Valida login aplicando encriptaci√≥n bcrypt"""
        resultado = daouser.validarLogin(User(run=username))
        if resultado and Encoder().verify(clave, password_hash_db):
            return User(...)  # Retorna objeto User si credenciales son v√°lidas
4. Capa de Controlador (/controlador)
validations.py - L√≥gica de Negocio Principal
python
def inicial(empleado_actual):
    """
    Men√∫ principal del sistema despu√©s del login
    Gestiona el flujo de la aplicaci√≥n seg√∫n el rol del usuario
    """
    while True:
        mostrar_menu_principal()
        opcion = input("Seleccione una opci√≥n: ")
        
        if opcion == '1': gestion_empleados()
        elif opcion == '2': gestion_clientes()
        # ... otras opciones

def gestion_clientes():
    """
    M√≥dulo completo de gesti√≥n de clientes
    Implementa CRUD completo con interfaz de consola
    """
    while True:
        mostrar_menu_clientes()
        opcion = input("Seleccione una opci√≥n: ")
        
        if opcion == '1': agregar_cliente()
        elif opcion == '2': buscar_cliente()
        # ... otras operaciones
5. Utilidades (/utils)
encoder.py - Seguridad con Bcrypt
python
class Encoder:
    """
    Utilidad para encriptaci√≥n y verificaci√≥n de contrase√±as
    Usa el algoritmo bcrypt para seguridad robusta
    """
    def encode(self, password):
        """Convierte contrase√±a en texto plano a hash seguro"""
        return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
    
    def verify(self, password, hashed_password):
        """Verifica si contrase√±a coincide con hash almacenado"""
        return bcrypt.checkpw(password.encode('utf-8'), hashed_password.encode('utf-8'))
6. Conexi√≥n a BD (/conex)
conn.py - Gesti√≥n de Conexiones MySQL
python
class Conex:
    """
    Gestiona la conexi√≥n a la base de datos MySQL
    Implementa patr√≥n Singleton para conexi√≥n √∫nica
    """
    def __init__(self, host="localhost", user="root", passwd="", database="viaja_seguro"):
        self.host = host
        self.user = user
        self.passwd = passwd
        self.database = database
        self.__myconn = None
        self.connect()  # Conexi√≥n autom√°tica al instanciar
    
    def connect(self):
        """Establece conexi√≥n con la base de datos"""
        try:
            self.__myconn = pymysql.connect(...)
            print("‚úÖ Conexi√≥n establecida")
        except Exception as ex:
            print(f"‚ùå Error de conexi√≥n: {ex}")
7. Punto de Entrada
main.py - Aplicaci√≥n Principal
python
def main():
    """
    Funci√≥n principal que inicia la aplicaci√≥n
    Gestiona el flujo de login y men√∫ de acceso
    """
    while True:
        print("=== SISTEMA DE GESTI√ìN DE ARRIENDOS ===")
        menuAccesoUsuarios()
        opcion = input("Ingrese opci√≥n: ")
        
        if opcion == '1': 
            # Proceso de login con validaci√≥n
            username = input("Ingrese RUN de empleado: ")
            password = getpass.getpass("Ingrese contrase√±a: ")
            empleado = validarLogin(username, password)
            
            if empleado:
                inicial(empleado)  # Pasar al men√∫ principal
üîê Sistema de Seguridad
Autenticaci√≥n
Login seguro con RUN y contrase√±a

L√≠mite de intentos (3 intentos m√°ximos)

Contrase√±as encriptadas con bcrypt

Bloqueo autom√°tico tras m√∫ltiples fallos

Autorizaci√≥n
Roles diferenciados: Gerente vs Empleado

Permisos granulares: Gerente tiene acceso completo

Validaci√≥n de sesiones: Usuario debe estar autenticado

Encriptaci√≥n
